segunda-feira, 1 de abril de 2019Dizem que depois que você aprende o Terminal é que você realmente começa a entender Linux profundamente. Seja isso uma verdade ou não, de fato, é verdade que dominar o terminal te dá algumas vantagens em relação ao que você pode fazer com o seu sistema. Hoje você vai conferir 5 dias para quem quer ser um PRO no Shell Script.1 - Portabilidade dos seus Shell ScriptMuitas vezes indicamos automaticamente o caminho da Shebang como #!/bin/bash, no entanto, se o Bash estiver instalado num diretório diferente (como em sistemas como FreeBSD, OpenBSD e algumas distros Linux) provavelmente ela não conseguirá encontrar o interpretador e seu programa/script não funcionará.Logo, a melhor maneira de você evitar esse tipo de problema é indicar o caminho da env que é padrão em todos os sistemas e a mesma se encarrega de redirecionar pro caminho onde o interpretador está localizado. Então, procure sempre iniciar seus programas/scripts com o seguinte caminho após a Shebang:#!/usr/bin/env bashO mesmo vale para outros Shells: ZSH, FISH, etc.2 - Procure sempre pôr cabeçalho nos seus scriptsOs cabeçalhos são importantes para que a pessoa saiba pra que serve seu programa/script, como lhe contactar em caso de algum problema, qual a forma de utilização e entre diversos outros pontos positivos.Geralmente num cabeçalho deve haver o "help", "changelog", "TODO", "FIXME",... ou seja, diversas informações necessárias. No entanto, em resumo, algumas informações são fundamentais, tais como: Descrição do script; Autor; Versão e Licença. Veja abaixo um exemplo mínimo e básico de um cabeçalho:# autor: Nome Sobrenome <site.dominio># descrição: O que seu Script/Programa faz# version: 1.0 # licença: MIT LicenseO exemplo acima está em Português, mas é interessante deixá-lo em Inglês, para ficar ainda mais global.3 - Separe por funçãoO motivo inicial da Linguagem Orientada à Objetos é a organização. No entanto, linguagens procedurais ou estruturais podem manter a organização separando cada "transformação" em funções . Em Shell Script, você pode declarar uma função em duas formas de sintax, veja abaixo ambas as formas:USANDO a palavra functionfunction minha_funcao(){echo "Minha função"}Ou SEM USAR a palavra functionminha_funcao(){echo "Minha função"}Para chamar a função, basta invocar o nome da função no script, ex.: minha_funcao4 - Deixe seu código com indentaçãoNo Shell Script, como na maioria das linguagens de programação, a indentação não é obrigatória, no entanto, ela é interessante para deixar seu código mais organizado, então procure sempre manter seu código indentado.Uma dica legal é se você usar o editor Vim , basta você selecionar tudo pressionando a tecla ESC e em seguinda combinando as teclas ggVG , após tudo selecionado, basta agora teclar duas vezes o sinal de igual == e seu código será automáticamente indentado. Mágica! :)5 - Declare nomes descritivosQuando criar nomes de variáveis e de funções, procure descrever (não tanto, lógico) e separando com underline **_** , pois ficará mais profissional e menos provável de haver conflito de nomes e situações desagradáveis, alguns exemplos de como descrever: set_name, get_name, display_info_start, etc.Se você ainda não domina Shell Script e o Terminal Linux. Aproveite uma promoção onde você pode adquirir 5 CURSO DO TERMINAL LINUX incluindo Shell Script, Expressões Regulares, Vim e Sed. Clicando nesse link http://bit.ly/Promo5pg para adquirir com o PagSeguro ou nesse link http://bit.ly/5CursosLinux para adquirir com o PayPal. Se quiser mais detalhes da promoção veja essa postagem: 5 Cursos do Terminal Linux para você! .Esse artigo foi escrito em parceria com a galera do Terminal Root, os quais são os autores dos cursos mencionados acima, até a próxima!